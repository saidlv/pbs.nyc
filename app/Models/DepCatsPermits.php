<?php

namespace App\Models;


use App\Helpers\Helper;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class DepCatsPermits extends ODataModel
{
    public $subject = "New DEP Cats Boiler Registration Filed";
    public $updateSubject = "New DEP Cats Boiler Status Update";
    public $reminderSubject = "DEP Cats Boiler Registration Reminder";
    public $mailview = 'mails.alerts.depCatsPermits';
    protected $datasetId = "f4rp-2kvy";
    protected $datasetName = "DEP CATS Permits";

    protected $dataColumn = "bbl";
    protected $dataSocrataKey = "bbl";

    protected $primaryKey = 'requestid';

    protected $table = 'dep_cats_permits';

    protected $updateFrequency = 'daily';

    protected $notifiables = [
        'requesttype',
        'expirationdate',
        'issuedate',
        'status'
    ];

    protected $selectables = [
        'requestid',
        'applicationid',
        'requesttype',
        'house',
        'street',
        'borough',
        'block',
        'lot',
        'bin',
        'expirationdate',
        'issuedate',
        'status'
    ];

    protected $fillable = ['requestid',
        'applicationid',
        'requesttype',
        'house',
        'street',
        'borough',
        'bin',
        'block',
        'lot',
        'ownername',
        'expirationdate',
        'make',
        'model',
        'burnermake',
        'burnermodel',
        'primaryfuel',
        'secondaryfuel',
        'quantity',
        'issuedate',
        'status',
        'premisename',
        'bbl'];


    protected $casts = [
        'requestid' => 'string',
    ];

    public function expirationDate()
    {
        return Helper::carbonParseYmd($this->expirationdate);
    }

    public function issueDate()
    {
        return Helper::carbonParseYmd($this->issuedate);
    }

    public function insertData($result)
    {
        $result["bbl"] = Helper::getBoroId($result["borough"]) . $result["block"] . $result["lot"];
        parent::insertData($result); // TODO: Change the autogenerated stub
    }

    public function scopeSummary($query)
    {
        return $query;
    }

    protected function getWhereString($force=false)
    {

        $array = DB::table('bin_bbl_unique')->get();
        $sql = "";
        foreach ($array as $item) {
            $sql .= "(borough = '" . Helper::getBoroName($item->boro) . "' and block = '" . $item->block . "' and lot = '" . $item->lot . "') OR";
        }
        $sql = substr($sql, 0, -3);
        return $sql;


        //TODO :updated_at bilgisi sürekli güncelleniyor şimdilik alttaki şekle gerek yok sürekli hepsini çekeceğiz
//        $notsynced = DB::table('bin_bbl_unique')->where('sync_at', null)->get();
//        $synced = DB::table('bin_bbl_unique')->where('sync_at', '!=', null)->get();
//        $lastsync = $synced->pluck('sync_at')->min();
//
//        $notsyncedsql = "";
//        if ($notsynced->count()) {
//
//            foreach ($notsynced as $item) {
//                $notsyncedsql .= "(borough = '" . Helper::getBoroName($item->boro) . "' and block = '" . $item->block . "' and lot = '" . $item->lot . "') OR";
//            }
//            $notsyncedsql = substr($notsyncedsql, 0, -3);
//        }
//
//        $syncedsql = "";
//        if ($synced->count()) {
//
//            foreach ($synced as $item) {
//                $syncedsql .= "(borough = '" . Helper::getBoroName($item->boro) . "' and block = '" . $item->block . "' and lot = '" . $item->lot . "') OR";
//            }
//            $syncedsql = substr($syncedsql, 0, -3);
//            $syncedsql = '(' . $syncedsql . ') and :updated_at > \'' . \Carbon\Carbon::parse($lastsync)->toDateString() . '\'';
//        }
//
//
//        if ($notsynced->count() && $synced->count())
//            return "(" . $syncedsql . ") or (" . $notsyncedsql . ")";
//        elseif ($synced->count())
//            return $syncedsql;
//        else
//            return $notsyncedsql;

    }

//
}
