<?php

namespace App\Models;


use App\Helpers\Helper;

class DobJobFilings extends ODataModel
{
    public $subject = "New DOB Job Filed";
    public $updateSubject = "New DOB Job Filings Status Update";
    public $mailview = 'mails.alerts.dobJobFilings';

    protected $datasetId = "ic3t-wcy2";
    protected $datasetName = "DOB Job Application Filings";

    protected $dataColumn = "bin";
    public $dataSocrataKey = "bin__";

    protected $updateFrequency = 'daily';

    protected $primaryKey = 'job_s1_no';

    protected $table = 'dob_job_filings';

    protected $maps = [
        'bin__' => 'bin',
    ];

    protected $appends =['bin'];

    protected $notifiables = [
        'job_status_descrp',
        'latest_action_date',
    ];

    protected $selectables = [
        'job__',
        'doc__',
        'bin__',
        'job_type',
        'job_status_descrp',
        'latest_action_date',
        'job_description',
        'dobrundate',
        'job_s1_no',
    ];

    protected $fillable = [
        'job_s1_no',
        'job__',
        'doc__',
        'borough',
        'house__',
        'street_name',
        'block',
        'lot',
        'bin__',
        'job_type',
        'job_status',
        'job_status_descrp',
        'latest_action_date',
        'building_type',
        'community___board',
        'cluster',
        'landmarked',
        'adult_estab',
        'loft_board',
        'city_owned',
        'little_e',
        'pc_filed',
        'efiling_filed',
        'plumbing',
        'mechanical',
        'boiler',
        'fuel_burning',
        'fuel_storage',
        'standpipe',
        'sprinkler',
        'fire_alarm',
        'equipment',
        'fire_suppression',
        'curb_cut',
        'other',
        'other_description',
        'applicant_s_first_name',
        'applicant_s_last_name',
        'applicant_professional_title',
        'applicant_license__',
        'professional_cert',
        'pre__filing_date',
        'paid',
        'fully_paid',
        'assigned',
        'approved',
        'fully_permitted',
        'initial_cost',
        'total_est__fee',
        'fee_status',
        'existing_zoning_sqft',
        'proposed_zoning_sqft',
        'horizontal_enlrgmt',
        'vertical_enlrgmt',
        'enlargement_sq_footage',
        'street_frontage',
        'existingno_of_stories',
        'proposed_no_of_stories',
        'existing_height',
        'proposed_height',
        'existing_dwelling_units',
        'proposed_dwelling_units',
        'existing_occupancy',
        'proposed_occupancy',
        'site_fill',
        'zoning_dist1',
        'zoning_dist2',
        'zoning_dist3',
        'special_district_1',
        'special_district_2',
        'owner_type',
        'non_profit',
        'owner_s_first_name',
        'owner_s_last_name',
        'owner_s_business_name',
        'owner_s_house_number',
        'owner_shouse_street_name',
        'city_',
        'state',
        'zip',
        'owner_sphone__',
        'job_description',
        'dobrundate',
        'total_construction_floor_area',
        'withdrawal_flag',
        'signoff_date',
        'special_action_status',
        'special_action_date',
        'building_class',
        'job_no_good_count',
        'gis_latitude',
        'gis_longitude',
        'gis_council_district',
        'gis_census_tract',
        'gis_nta_name',
        'gis_bin'];


    protected $casts = [
        'bin__' => 'string',
    ];

    public function latestActionDate()
    {
        return Helper::carbonParseYmd($this->latest_action_date);
    }

    public function insertData($result)
    {
        if (isset($result["job_description"]))
            $result["job_description"] = htmlspecialchars_decode($result["job_description"]);
        if (isset($result["latest_action_date"]))
            $result["latest_action_date"] = Helper::carbonParseYmd($result["latest_action_date"]);
        if (isset($result["dobrundate"]))
            $result["dobrundate"] = Helper::carbonParseYmdhsi($result["dobrundate"]);
        parent::insertData($result); // TODO: Change the autogenerated stub
    }

    public function scopeSummary($query)
    {
        return $query->where('latest_action_date', '>', '2018-01-01T00:00:00.000');
    }

//    protected function getWhereString()
//    {
//        return parent::getWhereString() . " and latest_action_date > '2018-01-01T00:00:00.000'"; // TODO: Change the autogenerated stub
//    }



    public function getBinAttribute()
    {
        return $this->attributes['bin__'];
    }

}
