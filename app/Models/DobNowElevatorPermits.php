<?php

namespace App\Models;


use App\Helpers\Helper;
use Carbon\Carbon;

class DobNowElevatorPermits extends ODataModel
{
    public $subject = "New DOB Now Elevator Permit Issued";
    public $updateSubject = "New DOB Now Elevator Permit Status Update";
    public $reminderSubject = "DOB Now Elevator Permit Reminder";
    public $mailview = 'mails.alerts.dobNowElevatorPermits';
    protected $datasetId = "kfp4-dz4h";
    protected $datasetName = "DOB NOW: Build Elevator Permit Applications";

    protected $dataColumn = "bin";
    protected $dataSocrataKey = "bin";

    protected $primaryKey = 'job_filing_number';

    protected $table = 'dob_now_elevator_permits';

    protected $updateFrequency = 'daily';

    protected $notifiables = [
        'filing_status',
        'permit_entire_date',
        'signedoff_date',
        'disability_expirationdate',
    ];

    protected $selectables = ['job_filing_number',
        'job_number',
        'filing_number',
        'filing_date',
        'filing_status',
        'bin',
        'permit_entire_date',
        'signedoff_date',
        'applicant_firstname',
        'applicant_lastname',
        'applicant_businessname',
        'disability_expirationdate',
    ];


    protected $fillable = ['job_filing_number',
        'job_number',
        'filing_number',
        'filing_date',
        'filing_type',
        'elevatordevicetype',
        'filing_status',
        'filingstatus_or_filingincludes',
        'building_code',
        'electrical_permit_number',
        'bin',
        'house_number',
        'street_name',
        'zip',
        'borough',
        'block',
        'lot',
        'building_type',
        'buildingstories',
        'is_in_conjunction',
        'associatedjobnumber',
        'total_construction_floor',
        'plan_examiner_assigned_date',
        'incomplete_date',
        'last_incomplete_submission',
        'first_objection_date',
        'last_objection_date',
        'resubmission_date',
        'permit_entire_date',
        'signedoff_date',
        'applicant_firstname',
        'applicant_lastname',
        'applicant_businessname',
        'applicant_address',
        'applicant_city',
        'applicant_state',
        'applicant_zip',
        'applicant_license_number',
        'designprofessional_firstname',
        'designprofessional_lastname',
        'designprofessional',
        'designprofessional_address',
        'designprofessional_city',
        'designprofessional_state',
        'designprofessional_zip',
        'designprofessional_license',
        'owner_firstname',
        'owner_lastname',
        'owner_title',
        'owner_businessname',
        'owner_address',
        'owner_city',
        'owner_state',
        'owner_zip',
        'owner_type',
        'asbestosabatementcompliance',
        'depacp5controlno',
        'descriptionofwork',
        'gl_company',
        'gl_policy',
        'gl_expirationdate',
        'worker_compensation_company',
        'worker_compensation_policy',
        'worker_compensation',
        'disability_company',
        'disability_policy',
        'disability_expirationdate',
        'estimated_cost',
        'filing_fee',
        'no_good_check',
        'total_fee',
        'amount_paid',
        'amount_due',
        'latitude',
        'longitude',
        'community_district_number',
        'city_council_district',
        'census_tract',
        'bbl',
        'nta_name'];

    protected $casts = [
        'is_in_conjunction' => 'boolean',
        'job_filing_number' => 'string'
    ];

    public function permitEntireDate()
    {
        return Helper::carbonParseYmd($this->permit_entire_date);
    }

    public function signedOffDate()
    {
        return Helper::carbonParseYmd($this->signedoff_date);
    }

    public function filingDate()
    {
        return Helper::carbonParseYmd($this->filing_date);
    }
    public function disabilityExpirationDate()
    {
        return Helper::carbonParseYmd($this->disability_expirationdate);
    }

    public function scopeSummary($query)
    {
        return $query->where('signedoff_date', '>', now()->addMonths(-1)->format('Y-m-d') . "T00:00:00.000");
    }

    protected function devices()
    {
        return $this->hasMany(DobNowElevatorDeviceDetails::class, 'job_filing_number', 'job_filing_number');
    }

//    protected function getWhereString()
//    {
//        return parent::getWhereString() . " and signedoff_date > '" . now()->addMonths(-1)->format('Y-m-d') . "T00:00:00.000'"; // TODO: Change the autogenerated stub
//    }
}
